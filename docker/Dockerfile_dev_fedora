# 第一阶段：构建环境（安装所有依赖）
FROM fedora:latest AS builder

WORKDIR /app

ARG TARGETARCH

# 设置时区为上海，环境变量
ENV TimeZone=Asia/Shanghai \
    MINICONDA_VERSION=py313_25.7.0-2 \
    MINICONDA_PATH=/opt/miniconda3

# 安装编译工具，依赖包    
RUN ln -snf /usr/share/zoneinfo/$TimeZone /etc/localtime && echo $TimeZone > /etc/timezone \
    && dnf -y update \
    && dnf -y install tzdata wget unzip ca-certificates gcc gcc-c++ make openssl-devel \
        libffi-devel libgomp binutils readline-devel git mysql-devel thrift-devel zlib-ng-compat-static \
        cmake automake autoconf libtool pkgconf pkgconfig redhat-rpm-config rpm-build \
    && dnf clean all \
    # 配置git使用https而非ssl
    && git config --global http.sslVerify false \
    # 安装xmake（使用官方安装脚本）
    && wget https://xmake.io/shget.text -O - | bash \
    && echo ". /root/.xmake/profile" >> /root/.bashrc \
    && echo "export XMAKE_ROOT=y" >> /root/.bashrc \
    && echo "export XMAKE_MAIN_REPO=https://gitee.com/tboox/xmake-repo.git" >> /root/.bashrc \
    # clone hikyuu 源码（使用国内镜像源）
    && git clone https://github.com/fasiondog/hikyuu.git \
    # 安装Miniconda
    # 关键修复：接受Anaconda服务条款（必须在conda install前执行）
    # 配置pip镜像 + 安装hikyuu（pip包）
    # 明确安装ipython
    # 进一步清理冗余文件（减小体积）
    && if [ "$TARGETARCH" = "amd64" ]; then \
            MINICONDA_URL="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh"; \
        elif [ "$TARGETARCH" = "arm64" ]; then \
            MINICONDA_URL="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-aarch64.sh"; \
        else \
            echo "Unsupported architecture: $TARGETARCH" && exit 1; \
        fi && \
        wget --quiet "$MINICONDA_URL" -O miniconda.sh && \
        bash miniconda.sh -b -p ${MINICONDA_PATH} && \
        rm miniconda.sh && \
        ${MINICONDA_PATH}/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main && \
        ${MINICONDA_PATH}/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r && \
        ${MINICONDA_PATH}/bin/pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple && \
        ${MINICONDA_PATH}/bin/pip config set global.trusted-host pypi.tuna.tsinghua.edu.cn && \
        ${MINICONDA_PATH}/bin/pip install --no-cache-dir --upgrade pip && \
        ${MINICONDA_PATH}/bin/conda install -y ipython && \
        ${MINICONDA_PATH}/bin/python -m pip install --no-cache-dir -r hikyuu/requirements.txt && \
        ${MINICONDA_PATH}/bin/conda clean -afy && \
        rm -rf ${MINICONDA_PATH}/pkgs/*/info \
            ${MINICONDA_PATH}/doc \
            ${MINICONDA_PATH}/examples \
    # 从构建阶段复制Miniconda（包含已安装的所有包：conda包和pip包）
    # 通过conda init配置bash，自动激活base环境
    # 设置LD_LIBRARY_PATH和PYTHONPATH环境变量
    # 替换 Miniconda 的 libstdc++ 为系统库
    && bash -c "$MINICONDA_PATH/bin/conda init bash" && \  
    echo "conda activate base" >> /root/.bashrc && \
    echo "export LD_LIBRARY_PATH=/usr/lib64:/opt/miniconda3/lib" >> /root/.bashrc && \
    echo "export PYTHONPATH=/app/hikyuu" >> /root/.bashrc && \
    SYSTEM_LIB_PATH=$(find /usr/lib64 -name "libstdc++.so.6" | head -n 1) && \
    mv $MINICONDA_PATH/lib/libstdc++.so.6 $MINICONDA_PATH/lib/libstdc++.so.6.bak && \
    ln -s $SYSTEM_LIB_PATH $MINICONDA_PATH/lib/libstdc++.so.6 
    # 验证替换结果
    # strings $MINICONDA_PATH/lib/libstdc++.so.6 | grep GLIBCXX_3.4.30

# -l表示登录shell，会加载.bashrc中的conda配置
CMD ["bash", "-c", "cd hikyuu && exec bash -l"]